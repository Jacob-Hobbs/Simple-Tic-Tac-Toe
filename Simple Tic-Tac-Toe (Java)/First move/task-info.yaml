type: edu
custom_name: First move!
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.stream.Collectors;
      
      enum FieldState {
          X, O, FREE;
      
          static FieldState get(char symbol) {
              switch (symbol) {
                  case 'X': return X;
                  case 'O': return O;
                  case ' ':
                  case '_':
                      return FREE;
                  default: return null;
              }
          }
      }
      
      class TicTacToeField {
      
          final FieldState[][] field;
      
          TicTacToeField(FieldState[][] field) {
              this.field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  System.arraycopy(field[row], 0, this.field[row], 0, 3);
              }
          }
      
          TicTacToeField(String str) {
              field = new FieldState[3][3];
              for (int row = 0; row < 3; row++) {
                  for (int col = 0; col < 3; col++) {
                      field[row][col] = FieldState.get(str.charAt(row * 3 + col));
                  }
              }
          }
      
          boolean equalTo(TicTacToeField other) {
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          boolean hasNextAs(TicTacToeField other) {
              boolean improved = false;
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 3; j++) {
                      if (field[i][j] != other.field[i][j]) {
                          if (field[i][j] == FieldState.FREE && !improved) {
                              improved = true;
                          }
                          else {
                              return false;
                          }
                      }
                  }
              }
              return improved;
          }
      
          boolean isCloseTo(TicTacToeField other) {
              return equalTo(other)
                  || hasNextAs(other)
                  || other.hasNextAs(this);
          }
      
          static TicTacToeField parse(String fieldStr) {
      
              try {
                  List<String> lines = fieldStr
                      .lines()
                      .map(String::strip)
                      .filter(e ->
                          e.startsWith("|")
                              && e.endsWith("|"))
                      .collect(Collectors.toList());
      
                  for (String line : lines) {
                      if (line.length() != 9) {
                          throw new WrongAnswer("Line of Tic-Tac-Toe " +
                              "field should be 9 characters long\n" +
                              "found " + line.length() + " characters in \"" + line + "\"");
                      }
                      for (char c : line.toCharArray()) {
                          if (c != 'X'
                              && c != 'O'
                              && c != '|'
                              && c != ' '
                              && c != '_') {
                              return null;
                          }
                      }
                  }
      
                  FieldState[][] field = new FieldState[3][3];
      
                  int y = 0;
                  for (String line : lines) {
                      char[] cols = new char[] {
                          line.charAt(2),
                          line.charAt(4),
                          line.charAt(6)
                      };
      
                      int x = 0;
                      for (char c : cols) {
                          FieldState state = FieldState.get(c);
                          if (state == null) {
                              return null;
                          }
                          field[y][x] = state;
                          x++;
                      }
                      y++;
                  }
      
                  return new TicTacToeField(field);
              } catch (Exception ex) {
                  return null;
              }
          }
      
      
          static List<TicTacToeField> parseAll(String output) {
              List<TicTacToeField> fields = new ArrayList<>();
      
              List<String> lines = output
                  .lines()
                  .map(String::strip)
                  .filter(e -> e.length() > 0)
                  .collect(Collectors.toList());
      
              String candidateField = "";
              boolean insideField = false;
              for (String line : lines) {
                  if (line.contains("----") && !insideField) {
                      insideField = true;
                      candidateField = "";
                  } else if (line.contains("----") && insideField) {
                      TicTacToeField field = TicTacToeField.parse(candidateField);
                      if (field != null) {
                          fields.add(field);
                      }
                      insideField = false;
                  }
      
                  if (insideField && line.startsWith("|")) {
                      candidateField += line + "\n";
                  }
              }
      
              return fields;
          }
      
      }
      
      
      class Clue {
          int x, y;
          String input;
          Clue(String input, int x, int y) {
              this.input = input;
              this.x = x;
              this.y = y;
          }
      }
      
      public class TicTacToeTest extends StageTest<Clue> {
      
          static final String[] inputs = new String[] {
              "1 1", "1 2", "1 3",
              "2 1", "2 2", "2 3",
              "3 1", "3 2", "3 3"
          };
      
          String iterateCells(String initial) {
              int index = -1;
              for (int i = 0; i < inputs.length; i++) {
                  if (initial.equals(inputs[i])) {
                      index = i;
                      break;
                  }
              }
              if (index == -1) {
                  return "";
              }
              String fullInput = "";
              for (int i = index; i < index + 9; i++) {
                  fullInput += inputs[i % inputs.length] + "\n";
              }
              return fullInput;
          }
      
          @Override
          public List<TestCase<Clue>> generate() {
      
              List<TestCase<Clue>> tests = new ArrayList<>();
      
              int i = 0;
      
              for (String startField : new String[] {
                  "_XXOO_OX_",
                  "_________",
                  "X_X_O____"
              }) {
      
                  for (String input : inputs) {
                      String fullInput = iterateCells(input);
      
                      String[] strNums = input.split("\\s+");
                      int x = Integer.parseInt(strNums[0]);
                      int y = Integer.parseInt(strNums[1]);
      
                      if (i % 2 == 1) {
                          // mix with incorrect data
                          fullInput = "4 " + i + "\n" + fullInput;
                      }
      
                      tests.add(new TestCase<Clue>()
                          .setInput(startField + "\n" + fullInput)
                          .setAttach(new Clue(startField, x, y)));
      
                      i++;
                  }
      
              }
      
              return tests;
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              List<TicTacToeField> fields = TicTacToeField.parseAll(reply);
      
              if (fields.size() != 2) {
                  return new CheckResult(false,
                      "Can't find two fields inside output");
              }
      
              TicTacToeField curr = fields.get(0);
              TicTacToeField next = fields.get(1);
      
              TicTacToeField correctCurr = new TicTacToeField(clue.input);
              TicTacToeField correctNext = new TicTacToeField(correctCurr.field);
      
              String[] numInputs = iterateCells(clue.x + " " + clue.y).split("\n");
              for (String input : numInputs) {
                  String[] strNums = input.split(" ");
                  int x = Integer.parseInt(strNums[0]);
                  int y = Integer.parseInt(strNums[1]);
                  if (correctNext.field[x - 1][y - 1] == FieldState.FREE) {
                      correctNext.field[x - 1][y - 1] = FieldState.X;
                      break;
                  }
              }
      
              if (!curr.equalTo(correctCurr)) {
                  return new CheckResult(false,
                      "The first field is not equal to the input field");
              }
      
              if (!next.equalTo(correctNext)) {
                  return new CheckResult(false,
                      "The first field is correct, but the second is not");
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/tictactoe/TicTacToeBoard.java
    visible: true
    text: |
      package tictactoe;
      
      import java.util.ArrayList;
      
      public class TicTacToeBoard {
          private String[][] ticTacToeArray;
          private String winner;
      
          private ArrayList<String> winnerList;
      
          // TicTacToeBoard default constructor
          public TicTacToeBoard() {
              this.ticTacToeArray = new String[3][5];
              this.winner = "none";
              this.winnerList = new ArrayList<>();
          }
      
          // Method to return TicTacToe board as array[][]
          public String[][] getTicTacToeArray() {
              return this.ticTacToeArray;
          }
      
          // Method to set the values of the TicTacToe board according to user input
          public void setTicTacToeArray(String input) {
              int currentChar = 0;
              for (int i = 0; i < 3; i++) {
                  for (int j = 0; j < 5; j++) {
                      if (j % 2 == 0) {
                          this.ticTacToeArray[i][j] = String.valueOf(input.charAt(currentChar));
                          currentChar++;
                      } else {
                          this.ticTacToeArray[i][j] = " ";
                      }
                  }
              }
          }
      
          // Method to output current TicTacToe board to terminal with styling
          public String printTicTacToeBoard() {
              StringBuilder sb = new StringBuilder();
              sb.append("---------\n");
              for (int i = 0; i < 3; i++) {
                  sb.append("| ");
                  for (int j = 0; j < 5; j++) {
                      sb.append(this.ticTacToeArray[i][j]);
                  }
                  sb.append(" |");
                  sb.append("\n");
              }
              sb.append("---------");
              return String.valueOf(sb);
          }
      
          // Method to output result of TicTacToe game given user input
          public String getResult(String input) {
              if (impossibleBoard(input)) {
                  return "Impossible";
              }
              this.winnerList.clear();
              if ((horizontalWin(input)) || (verticalWin(input)) || (diagonalWin(input))) {
                  return this.winner + " wins";
              } else if (!(horizontalWin(input) || verticalWin(input) || diagonalWin(input))
                      && (this.winner.equals("none")) && ((countSymbol(input, "X") +
                      countSymbol(input, "O")) != 9)) {
                  return "Game not finished";
              }
              return "Draw";
          }
      
          // Method to return boolean depending on horizontal win condition
          public boolean horizontalWin(String input) {
              boolean returnBoolean = false;
              for (int i = 0; i < 2; i++) {
                  String symbol = i == 0 ? "X" : "O";
                  if ((String.valueOf(input.charAt(0)).equals(symbol) &&
                          String.valueOf(input.charAt(1)).equals(symbol)
                          && String.valueOf(input.charAt(2)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
                  if ((String.valueOf(input.charAt(3)).equals(symbol) &&
                          String.valueOf(input.charAt(4)).equals(symbol)
                          && String.valueOf(input.charAt(5)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
                  if ((String.valueOf(input.charAt(6)).equals(symbol) &&
                          String.valueOf(input.charAt(7)).equals(symbol)
                          && String.valueOf(input.charAt(8)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
              }
              if (!this.winnerList.isEmpty()) {
                  this.winner = this.winnerList.get(0);
              }
              return returnBoolean;
          }
      
          // Method to return boolean depending on vertical win condition
          public boolean verticalWin(String input) {
              boolean returnBoolean = false;
              for (int i = 0; i < 2; i++) {
                  String symbol = i == 0 ? "X" : "O";
                  if ((String.valueOf(input.charAt(0)).equals(symbol) &&
                          String.valueOf(input.charAt(3)).equals(symbol)
                          && String.valueOf(input.charAt(6)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
                  if ((String.valueOf(input.charAt(1)).equals(symbol) &&
                          String.valueOf(input.charAt(4)).equals(symbol)
                          && String.valueOf(input.charAt(7)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
                  if ((String.valueOf(input.charAt(2)).equals(symbol) &&
                          String.valueOf(input.charAt(5)).equals(symbol)
                          && String.valueOf(input.charAt(8)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
              }
              if (!this.winnerList.isEmpty()) {
                  this.winner = this.winnerList.get(0);
              }
              return returnBoolean;
          }
      
          // Method to return boolean depending on diagonal win condition
          public boolean diagonalWin(String input) {
              boolean returnBoolean = false;
              for (int i = 0; i < 2; i++) {
                  String symbol = i == 0 ? "X" : "O";
                  if ((String.valueOf(input.charAt(0)).equals(symbol) &&
                          String.valueOf(input.charAt(4)).equals(symbol)
                          && String.valueOf(input.charAt(8)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
                  if ((String.valueOf(input.charAt(2)).equals(symbol) &&
                          String.valueOf(input.charAt(4)).equals(symbol)
                          && String.valueOf(input.charAt(6)).equals(symbol))) {
                      this.winnerList.add(symbol);
                      returnBoolean = true;
                  }
              }
              if (!this.winnerList.isEmpty()) {
                  this.winner = this.winnerList.get(0);
              }
              return returnBoolean;
          }
      
          // Method to determine if user input describes impossible gameplay scenario
          public boolean impossibleBoard(String input) {
              int xCount = countSymbol(input, "X");
              int oCount = countSymbol(input, "O");
              // Impossible when: the number of X's is two greater or more than O's (vice versa)
              if ((xCount - oCount >= 2) || (oCount - xCount >= 2)) {
                  return true;
              }
              // Impossible when: there are multiple winners (O-O-O & X-X-X)
              if ((horizontalWin(input) || verticalWin(input) || diagonalWin(input)) &&
                      (this.winnerList.contains("X") && this.winnerList.contains("O"))) {
                  return true;
              }
              return false;
          }
      
          // Method to count how many of each X's and O's have been played
          public int countSymbol(String input, String symbol) {
              int symbolCount = 0;
              for (int i = 0; i < input.length(); i++) {
                  if (String.valueOf(input.charAt(i)).equals(symbol)) {
                      symbolCount++;
                  }
              }
              return symbolCount;
          }
      }
    learner_created: true
  - name: src/tictactoe/GameInterface.java
    visible: true
    text: |
      package tictactoe;
      
      import java.sql.SQLOutput;
      import java.util.Arrays;
      import java.util.Scanner;
      
      public class GameInterface {
          private final TicTacToeBoard ticTacToeBoard;
          private final Scanner scanner;
      
          // Default constructor for GameInterface class
          public GameInterface() {
              this.ticTacToeBoard = new TicTacToeBoard();
              this.scanner = new Scanner(System.in);
          }
      
          // Method to maintain flow of current game logic
          public void start() {
      
              String input = scanner.nextLine();
              this.ticTacToeBoard.setTicTacToeArray(input);
              System.out.println(this.ticTacToeBoard.printTicTacToeBoard());
              System.out.println(this.ticTacToeBoard.getResult(input));
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/projects/48/stages/258/implement#comment
status: Unchecked
record: -1
